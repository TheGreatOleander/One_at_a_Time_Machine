#!/data/data/com.termux/files/usr/bin/python3

# === create_repo_and_push.py ===
# Reads spec.md, creates a GitHub repo, initializes, and pushes starter files

import os
import json
import subprocess
from pathlib import Path
import requests

ACTIVE_DIR = Path("ideas/active")
ISSUE_FILE = next(ACTIVE_DIR.glob("*.json"), None)
SPEC_PATH = ACTIVE_DIR / "spec.md"
GITHUB_USER = os.getenv("GITHUB_USER")
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")

if not ISSUE_FILE or not SPEC_PATH.exists():
    print("‚ùå Missing active issue JSON or spec.md")
    exit(1)

with open(ISSUE_FILE) as f:
    issue = json.load(f)

repo_name = issue['title'].lower().replace(' ', '-').replace('/', '-')[:30]
repo_desc = issue.get('title', '')

# === Create GitHub Repo ===
print(f"üì¶ Creating GitHub repo: {repo_name}...")
url = "https://api.github.com/user/repos"
headers = {"Authorization": f"token {GITHUB_TOKEN}"}
data = {
    "name": repo_name,
    "description": repo_desc,
    "private": False,
    "auto_init": False
}
res = requests.post(url, headers=headers, json=data)

if res.status_code not in [200, 201]:
    print(f"‚ùå Failed to create repo: {res.status_code} {res.text}")
    exit(1)

# === Init Local Repo ===
repo_dir = Path("repos") / repo_name
repo_dir.mkdir(parents=True, exist_ok=True)

(repo_dir / "README.md").write_text(f"# {repo_name}\n\n{repo_desc}\n")
(repo_dir / "SPEC.md").write_text(SPEC_PATH.read_text())

subprocess.run(["git", "init"], cwd=repo_dir)
subprocess.run(["git", "remote", "add", "origin", f"https://github.com/{GITHUB_USER}/{repo_name}.git"], cwd=repo_dir)
subprocess.run(["git", "add", "."], cwd=repo_dir)
subprocess.run(["git", "commit", "-m", "Initial commit: generated by One-at-a-Time"], cwd=repo_dir)
subprocess.run(["git", "branch", "-M", "main"], cwd=repo_dir)
subprocess.run(["git", "push", "-u", "origin", "main"], cwd=repo_dir)

print(f"‚úÖ Repo pushed: https://github.com/{GITHUB_USER}/{repo_name}")
